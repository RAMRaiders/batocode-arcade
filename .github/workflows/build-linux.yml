name: Build Linux Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-linux:
    permissions:
      contents: write
      pages: write
      id-token: write

    runs-on: ubuntu-24.04

    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up QEMU (for ARM emulation)
      if: matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Electron system dependencies
      run: sudo apt-get update && sudo apt-get install -y libgtk-3-0 libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libasound2t64

    - name: Ensure dist folder exists
      run: mkdir -p dist

    - name: Build Linux ${{ matrix.arch }} package (unpacked)
      run: npx electron-builder --linux --${{ matrix.arch }} --dir

    - name: Prepare package directory, media, and launcher script
      id: prepare_package
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION="${GITHUB_REF_NAME#v}"
        else
          VERSION="PR-${GITHUB_SHA::7}"
        fi

        if [[ "${{ matrix.arch }}" == "x64" ]]; then
          SOURCE_UNPACKED_DIR="linux-unpacked"
          PKG_ARCH="x86_64"
        else
          SOURCE_UNPACKED_DIR="linux-${{ matrix.arch }}-unpacked"
          PKG_ARCH="aarch64"
        fi

        TARGET_PACKAGE_DIR_NAME="batocode-arcade-linux-${{ matrix.arch }}-$VERSION"
        PACKAGE_STAGE_DIR="dist/$TARGET_PACKAGE_DIR_NAME"

        mkdir -p "$PACKAGE_STAGE_DIR/batocode-arcade"

        shopt -s dotglob
        mv "dist/$SOURCE_UNPACKED_DIR"/* "$PACKAGE_STAGE_DIR/batocode-arcade/"
        shopt -u dotglob

        rmdir "dist/$SOURCE_UNPACKED_DIR"

        # Create the launcher script
        echo '#!/bin/bash' > "$PACKAGE_STAGE_DIR/batocode-arcade.sh"
        echo 'DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' >> "$PACKAGE_STAGE_DIR/batocode-arcade.sh"
        echo '"$DIR/batocode-arcade/batocode-arcade" --no-sandbox' >> "$PACKAGE_STAGE_DIR/batocode-arcade.sh"
        chmod +x "$PACKAGE_STAGE_DIR/batocode-arcade.sh"

        # Pad config
        cat << EOF > "$PACKAGE_STAGE_DIR/batocode-arcade.sh.keys"
        {
            "actions_player1": [
                {
                    "trigger": [
                        "hotkey",
                        "start"
                    ],
                    "type": "key",
                    "target": [
                        "KEY_LEFTALT",
                        "KEY_F4"
                    ]
                }
            ]
        }
        EOF

        # Prepare Batocera package structure
        PKG_ROOT="batocera-pkg"
        PORTS_DIR="$PKG_ROOT/userdata/roms/ports/batocode-arcade"
        mkdir -p "$PORTS_DIR/images"
        mkdir -p "$PORTS_DIR/videos"

        # Copy binaries/scripts
        cp -r "$PACKAGE_STAGE_DIR/batocode-arcade.sh" "$PKG_ROOT/userdata/roms/ports/"
        cp -r "$PACKAGE_STAGE_DIR/batocode-arcade.sh.keys" "$PKG_ROOT/userdata/roms/ports/"
        cp -r "$PACKAGE_STAGE_DIR/batocode-arcade/" "$PKG_ROOT/userdata/roms/ports/"

        # Copy images/videos from pkgbuild
        cp pkgbuild/images/batocode-arcade-image.png "$PORTS_DIR/images/" || true
        cp pkgbuild/images/batocode-arcade-thumb.png "$PORTS_DIR/images/" || true
        cp pkgbuild/videos/batocode-arcade-video.mp4 "$PORTS_DIR/videos/" || true

        # Create .PKGINFO
        cat <<PKGINFO > $PKG_ROOT/.PKGINFO
        pkgname = batocode-arcade
        pkgver = $VERSION
        pkgdesc = A makecode arcade kiosk wrapper to run own created games inside Batocera
        arch = $PKG_ARCH
        group = ports
        packager = RAM Raiders
        url = https://github.com/RAMRaiders/batocode-arcade
        PKGINFO

        # Create .BATOEXEC
        NOW=$(date +%Y%m%dT%H%M%S)
        cat <<EOF > $PKG_ROOT/.BATOEXEC
        gamelist = ports
        <game>
        	<path>./batocode-arcade.sh</path>
        	<name>BatoCode Arcade</name>
        	<desc>A makecode arcade kiosk wrapper to run own created games in Batocera</desc>
        	<releasedate>$NOW</releasedate>
        	<developer>RAM Raiders</developer>
        	<publisher>RAM Raiders</publisher>
        	<genre>Arcade</genre>
        	<players>1-6</players>
        	<image>./batocode-arcade/images/batocode-arcade-image.png</image>
        	<thumb>./batocode-arcade/images/batocode-arcade-thumb.png</thumb>
        	<video>./batocode-arcade/videos/batocode-arcade-video.mp4</video>
        </game>
        EOF

        echo "target_package_dir_name=$TARGET_PACKAGE_DIR_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "pkg_arch=$PKG_ARCH" >> $GITHUB_OUTPUT

    - name: Create release tar.gz with shell, pad, and source files
      id: create_release_tar
      run: |
        cd dist/${{ steps.prepare_package.outputs.target_package_dir_name }}
        tar -czf ../batocode-arcade-${{ steps.prepare_package.outputs.version }}-${{ matrix.arch }}-release.tar.gz batocode-arcade.sh batocode-arcade.sh.keys batocode-arcade/
        echo "release_tar_path=$PWD/../batocode-arcade-${{ steps.prepare_package.outputs.version }}-${{ matrix.arch }}-release.tar.gz" >> $GITHUB_OUTPUT

    - name: Create Batocera Pacman Package
      id: create_pacman_pkg
      run: |
        VERSION="${{ steps.prepare_package.outputs.version }}"
        PKG_ARCH="${{ steps.prepare_package.outputs.pkg_arch }}"
        PKG_FILE="batocode-arcade-${VERSION}-${PKG_ARCH}.pkg.tar.zst"
        tar --zstd -cf "$PKG_FILE" -C batocera-pkg .
        mkdir -p pacman-repo
        cp "$PKG_FILE" pacman-repo/
        echo "pkg_file=$PWD/$PKG_FILE" >> $GITHUB_OUTPUT

    - name: Create pacman repo metadata (repo-add in Arch container)
      run: |
        docker run --rm -v $PWD/pacman-repo:/repo -w /repo archlinux:latest \
          bash -c "pacman -Sy --noconfirm pacman && repo-add batocode-arcade.db.tar.gz *.pkg.tar.zst"

    - name: Set artifact name
      id: artifact_name
      run: |
        REF_NAME="${{ github.ref_name || github.event.pull_request.head.sha }}"
        SAFE_REF_NAME="${REF_NAME//\//-}"
        echo "name=batocode-arcade-linux-${{ matrix.arch }}-${SAFE_REF_NAME}" >> $GITHUB_OUTPUT

    - name: Upload Build Artifact (for GitHub Actions UI)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact_name.outputs.name }}
        path: |
          dist/batocode-arcade-${{ steps.prepare_package.outputs.version }}-${{ matrix.arch }}-release.tar.gz
          ${{ steps.create_pacman_pkg.outputs.pkg_file }}
          pacman-repo/*
        retention-days: 5

    - name: Create GitHub Release and Upload Bundled Asset
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          dist/batocode-arcade-${{ steps.prepare_package.outputs.version }}-${{ matrix.arch }}-release.tar.gz
          ${{ steps.create_pacman_pkg.outputs.pkg_file }}
          pacman-repo/*
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy Pacman Repo to GitHub Pages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ./pacman-repo