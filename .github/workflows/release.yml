name: Build Linux Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pages: write
      id-token: write

    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU (for ARM emulation)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Electron system dependencies
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-0 libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libasound2t64

      - name: Ensure dist folder exists
        run: mkdir -p dist

      - name: Build Linux ${{ matrix.arch }} package (unpacked)
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            npx electron-builder --linux --x64 --dir
          elif [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            npx electron-builder --linux --arm64 --dir
          else
            echo "Unknown architecture: ${{ matrix.arch }}"
            exit 1
          fi

      - name: Prepare package directory, media, and launcher script
        id: prepare_package
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME#v}"
          PKGREL="1"
          VERSION_WITH_REL="${VERSION}-${PKGREL}"

          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            SOURCE_UNPACKED_DIR="linux-unpacked"
            PKG_ARCH="x86_64"
          else
            SOURCE_UNPACKED_DIR="linux-arm64-unpacked"
            PKG_ARCH="aarch64"
          fi

          PKG_ROOT="batocera-pkg"
          rm -rf "$PKG_ROOT"
          mkdir -p "$PKG_ROOT"

          PORTS_DIR="$PKG_ROOT/userdata/roms/ports"
          GAME_DIR="$PORTS_DIR/batocode-arcade"
          mkdir -p "$GAME_DIR"
          mkdir -p "$PORTS_DIR/images"
          mkdir -p "$PORTS_DIR/videos"

          shopt -s dotglob
          mv "dist/$SOURCE_UNPACKED_DIR"/* "$GAME_DIR/"
          shopt -u dotglob
          rmdir "dist/$SOURCE_UNPACKED_DIR"

          cp pkgbuild/batocode-arcade.sh "$PKG_ROOT/userdata/roms/ports/batocode-arcade.sh"
          chmod +x "$PKG_ROOT/userdata/roms/ports/batocode-arcade.sh"
          cp pkgbuild/batocode-arcade.sh.keys "$PKG_ROOT/userdata/roms/ports/batocode-arcade.sh.keys"
          cp pkgbuild/images/batocode-arcade-fanart.png "$PORTS_DIR/images/" || true
          cp pkgbuild/images/batocode-arcade-image.png "$PORTS_DIR/images/" || true
          cp pkgbuild/images/batocode-arcade-thumb.png "$PORTS_DIR/images/" || true
          cp pkgbuild/images/batocode-arcade-marquee.png "$PORTS_DIR/images/" || true
          cp pkgbuild/videos/batocode-arcade-video.mp4 "$PORTS_DIR/videos/" || true
          cp pkgbuild/.BATOEXEC "$PKG_ROOT/.BATOEXEC"

          cat <<PKGINFO > "$PKG_ROOT/.PKGINFO"
          pkgname = ports-batocode-arcade
          pkgver = $VERSION_WITH_REL
          pkgdesc = A makecode arcade kiosk wrapper to run own created games inside Batocera
          arch = $PKG_ARCH
          group = sys-ports
          packager = RAM Raiders
          url = https://github.com/RAMRaiders/batocode-arcade

          PKGINFO

          # Set directory permissions to match Batocera (0777) to avoid pacman warnings
          chmod 0777 "$PKG_ROOT"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_with_rel=$VERSION_WITH_REL" >> $GITHUB_OUTPUT
          echo "pkg_arch=$PKG_ARCH" >> $GITHUB_OUTPUT
          echo "pkg_root=$PKG_ROOT" >> $GITHUB_OUTPUT

      - name: Create Batocera Pacman Package using batocera-makepkg
        id: create_pacman_pkg
        run: |
          set -e
          PKG_ROOT="${{ steps.prepare_package.outputs.pkg_root }}"
          chmod +x pkgbuild/scripts/batocera-makepkg.sh

          pushd "$PKG_ROOT"
          bash "../pkgbuild/scripts/batocera-makepkg.sh"
          popd

          # Package is created one level up from $PKG_ROOT
          PKG_FILE=$(ls -1 ports-batocode-arcade-*.pkg.tar.zst | head -n1)

          if [[ ! -f "$PKG_FILE" ]]; then
            echo "ERROR: Package not created!"
            exit 1
          fi

          mkdir -p pacman-repo
          cp "$PKG_FILE" pacman-repo/
          echo "pkg_file=$PWD/$PKG_FILE" >> $GITHUB_OUTPUT

      - name: Package Linux release tarball
        run: |
          VERSION_WITH_REL="${{ steps.prepare_package.outputs.version_with_rel }}"
          PKG_ARCH="${{ steps.prepare_package.outputs.pkg_arch }}"
          tar -czvf "batocode-arcade-${VERSION_WITH_REL}-${PKG_ARCH}-release.tar.gz" \
            -C "${{ steps.prepare_package.outputs.pkg_root }}/userdata/roms/ports/batocode-arcade" .
          echo "release_tarball=batocode-arcade-${VERSION_WITH_REL}-${PKG_ARCH}-release.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload Linux release tarball for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: release-tarball-${{ matrix.arch }}
          path: batocode-arcade-*.tar.gz

      - name: Upload pacman repo artifacts for this arch
        uses: actions/upload-artifact@v4
        with:
          name: pacman-repo-${{ matrix.arch }}
          path: pacman-repo/*

  publish-release:
    needs: build-linux
    runs-on: ubuntu-24.04
    steps:
      - name: Download x86_64 tarball
        uses: actions/download-artifact@v4
        with:
          name: release-tarball-x86_64
          path: ./artifacts

      - name: Download aarch64 tarball
        uses: actions/download-artifact@v4
        with:
          name: release-tarball-aarch64
          path: ./artifacts

      - name: Upload both release tarballs to single GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-repo-db:
    needs: build-linux
    runs-on: ubuntu-24.04
    steps:
      - name: Download pacman-repo artifacts from all archs
        uses: actions/download-artifact@v4
        with:
          pattern: pacman-repo-*
          path: ./pacman-repo
          merge-multiple: false

      - name: Prepare per-arch repo-db directories
        run: |
          set -e
          mkdir -p repo-db-aarch64 repo-db-x86_64
          cp pacman-repo/pacman-repo-aarch64/*.pkg.tar.zst repo-db-aarch64/
          cp pacman-repo/pacman-repo-x86_64/*.pkg.tar.zst repo-db-x86_64/

      - name: Re-create repo-add database for aarch64
        run: |
          cd repo-db-aarch64
          rm -f *.db* *.files*
          docker run --rm -v "$PWD":/repo -w /repo archlinux:latest \
            bash -c "repo-add batocode-arcade.db.tar.gz *.pkg.tar.zst"
          echo "== aarch64 DB architectures =="
          tar -xOf batocode-arcade.db.tar.gz | grep '^arch =' || true
          echo "=============================="

      - name: Re-create repo-add database for x86_64
        run: |
          cd repo-db-x86_64
          rm -f *.db* *.files*
          docker run --rm -v "$PWD":/repo -w /repo archlinux:latest \
            bash -c "repo-add batocode-arcade.db.tar.gz *.pkg.tar.zst"
          echo "== x86_64 DB architectures =="
          tar -xOf batocode-arcade.db.tar.gz | grep '^arch =' || true
          echo "============================"

      - name: Upload final pacman repos for pages (per-arch)
        uses: actions/upload-artifact@v4
        with:
          name: pacman-repo-final
          path: |
            repo-db-aarch64/*
            repo-db-x86_64/*

  deploy-repo:
    needs: update-repo-db
    runs-on: ubuntu-24.04
    steps:
      - name: Download pacman repo dbs
        uses: actions/download-artifact@v4
        with:
          name: pacman-repo-final
          path: ./pacman-repo

      - name: Add .nojekyll to both repos
        run: |
          touch ./pacman-repo/repo-db-aarch64/.nojekyll
          touch ./pacman-repo/repo-db-x86_64/.nojekyll

      - name: Deploy Pacman Repos to GitHub Pages (per-arch folders)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./pacman-repo
